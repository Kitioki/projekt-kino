package pl.cinema.duplex.service;

import java.time.LocalDate;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import pl.cinema.model.Movie;
import pl.cinema.model.Schedule;
import pl.cinema.repository.ScheduleRepository;

public class ScheduleService {

	private ScheduleRepository repository;
	
	public ScheduleService() {
		repository = new ScheduleRepository();
	}
	
	public List<Schedule> getSchedules(){
		return repository.getSchedules();
	}
	
	public void createSchedule(Schedule schedule) {
		repository.addSchedule(schedule);
	}

	public void deleteSchedule(int scheduleId) {
		repository.deleteSchedule(scheduleId);
	}

	public void updateSchedule(Schedule schedule) {
		repository.updateSchedule(schedule);
	}

	public Map<Movie, List<Schedule>> getSchedulesByAirDate(LocalDate date) {
		List<Schedule> schedules = repository.getSchedulesByAirDate(date);
		Collections.sort(schedules, new Comparator<Schedule>() {

			@Override
			public int compare(Schedule o1, Schedule o2) {
				if(o1.getAirDate().after(o2.getAirDate())) {
					return 1;
				} else if(o1.getAirDate().before(o2.getAirDate())) {
					return -1;
				}
				return 0;
			}
			
		});
		
		Map<Movie, List<Schedule>> movieBySchedulesMap = new LinkedHashMap<>();
		for(Schedule schedule : schedules) {
			movieBySchedulesMap.computeIfAbsent(schedule.getMovie(), k -> new LinkedList<>()).add(schedule);
		}
		
		for(Map.Entry<Movie, List<Schedule>> entrySet : movieBySchedulesMap.entrySet()) {
			System.out.println(entrySet.getKey().getName());
			entrySet.getValue().forEach(schedule -> System.out.println(schedule.getAirDate()));
		}
		
		return movieBySchedulesMap;
	}

	public Schedule getSchedulesById(int scheduleId) {
		return repository.getScheduleById(scheduleId);
	}
	
}
